var searchIndex = {};
searchIndex['redis'] = {"items":[[0,"","redis","redis-rs is a rust implementation of a Redis client library.  It exposes\na general purpose interface to Redis and also provides specific helpers for\ncommonly used functionality."],[1,"Parser","","The internal redis response parser."],[1,"Client","","The client type."],[1,"Script","","Represents a lua script."],[1,"ScriptInvocation","","Represents a prepared script call."],[1,"Connection","","Represents a stateful redis TCP connection."],[1,"PubSub","","Represents a pubsub connection."],[1,"Msg","","Represents a pubsub message."],[1,"Cmd","","Represents redis commands."],[1,"Pipeline","","Represents a redis command pipeline."],[1,"Iter","","Represents a redis iterator."],[1,"Error","","Represents a redis error."],[11,"kind","","",0],[11,"desc","","",0],[11,"detail","","",0],[1,"InfoDict","","An info dictionary type."],[2,"Value","","Internal low-level redis value enum."],[12,"Nil","","A nil response from the server.",1],[12,"Int","","An integer response.  Note that there are a few situations\nin which redis actually returns a string for an integer which\nis why this library generally treats integers and strings\nthe same for all numeric responses.",1],[12,"Data","","An arbitary binary data.",1],[12,"Bulk","","A bulk response of more data.  This is generally used by redis\nto express nested structures.",1],[12,"Status","","A status response.",1],[12,"Okay","","A status response which represents the string \"OK\".",1],[2,"ErrorKind","","An enum of all error kinds."],[12,"ResponseError","","The server generated an invalid response.",2],[12,"TypeError","","Operation failed because of a type mismatch.",2],[12,"ExecAbortError","","A script execution was aborted.",2],[12,"BusyLoadingError","","The server cannot response because it's loading a dump.",2],[12,"NoScriptError","","A script that was requested does not actually exist.",2],[12,"InvalidClientConfig","","An error that was caused because the parameter to the\nclient were wrong.",2],[12,"ExtensionError","","A error that is unknown to the library.  This might be used\nby future redis servers or custom extensions.",2],[12,"InternalIoError","","An IO error was encountered while talking to the server.",2],[2,"NumericBehavior","","Helper enum that is used in some situations to describe\nthe behavior of arguments in a numeric context."],[12,"NonNumeric","","",3],[12,"NumberIsInteger","","",3],[12,"NumberIsFloat","","",3],[3,"parse_redis_value","","Parses bytes into a redis value."],[3,"transaction","","This function simplifies transaction management slightly.  What it\ndoes is automatically watching keys and then going into a transaction\nloop util it succeeds.  Once it goes through the results are\nreturned."],[3,"cmd","","Shortcut function to creating a command with a single argument."],[3,"pipe","","Shortcut for creating a new pipeline."],[3,"pack_command","","Packs a bunch of commands into a request.  This is generally a quite\nuseless function as this functionality is nicely wrapped through the\n`Cmd` object, but in some cases it can be useful.  The return value\nof this can then be send to the low level `ConnectionLike` methods."],[3,"from_redis_value","","A shortcut function to invoke `FromRedisValue::from_redis_value`\nto make the API slightly nicer."],[10,"new","","Creates a new parser that parses the data behind the reader.  More\nthan one value can be behind the reader in which case the parser can\nbe invoked multiple times.  In other words: the stream does not have\nto be terminated.",4],[10,"parse_value","","parses a single value out of the stream.  If there are multiple\nvalues you can call this multiple times.  If the reader is not yet\nready this will block.",4],[10,"open","","Connects to a redis server and returns a client.  This does not\nactually open a connection yet but it does perform some basic\nchecks on the URL that might make the operation fail.",5],[10,"get_connection","","Instructs the client to actually connect to redis and returns a\nconnection object.  The connection object can be used to send\ncommands to the server.  This can fail with a variety of errors\n(like unreachable host) so it's important that you handle those\nerrors.",5],[10,"get_pubsub","","Returns a PubSub connection.  A pubsub connection can be used to\nlisten to messages coming in through the redis publish/subscribe\nsystem.",5],[10,"req_packed_command","","",5],[10,"req_packed_commands","","",5],[10,"get_db","","",5],[10,"send_packed_command","","Sends an already encoded (packed) command into the TCP socket and\ndoes not read a response.  This is useful for commands like\n`MONITOR` which yield multiple items.  This needs to be used with\ncare because it changes the state of the connection.",6],[10,"recv_response","","Fetches a single response from the connection.  This is useful\nif used in combination with `send_packed_command`.",6],[10,"req_packed_command","","",6],[10,"req_packed_commands","","",6],[10,"get_db","","",6],[10,"subscribe","","Subscribes to a new channel.",7],[10,"psubscribe","","Subscribes to a new channel with a pattern.",7],[10,"unsubscribe","","Unsubscribes from a channel.",7],[10,"punsubscribe","","Unsubscribes from a channel with a pattern.",7],[10,"get_message","","Fetches the next message from the pubsub connection.  Blocks until\na message becomes available.  This currently does not provide a\nwait not to block :(",7],[10,"get_channel","","Returns the channel this message came on.",8],[10,"get_channel_name","","Convenience method to get a string version of the channel.  Unless\nyour channel contains non utf-8 bytes you can always use this\nmethod.  If the channel is not a valid string (which really should\nnot happen) then the return value is `\"?\"`.",8],[10,"get_payload","","Returns the message's payload in a specific format.",8],[10,"get_payload_bytes","","Returns the bytes that are the message's payload.  This can be used\nas an alternative to the `get_payload` function if you are interested\nin the raw bytes in it.",8],[10,"from_pattern","","Returns true if the message was constructed from a pattern\nsubscription.",8],[10,"get_pattern","","If the message was constructed from a message pattern this can be\nused to find out which one.  It's recommended to match against\nan `Option<String>` so that you do not need to use `from_pattern`\nto figure out if a pattern was set.",8],[10,"fmt","","",3],[10,"clone","","",3],[10,"eq","","",3],[10,"ne","","",3],[10,"fmt","","",2],[10,"clone","","",2],[10,"eq","","",2],[10,"ne","","",2],[10,"clone","","",1],[10,"eq","","",1],[10,"ne","","",1],[10,"looks_like_cursor","","Checks if the return value looks like it fulfils the cursor\nprotocol.  That means the result is a bulk item of length\ntwo with the first one being a cursor and the second a\nbulk response.",1],[10,"fmt","","",1],[10,"fmt","","",0],[10,"clone","","",0],[10,"eq","","",0],[10,"ne","","",0],[10,"simple","","",0],[10,"new","","Creates a new info dictionary from a string in the response of\nthe INFO command.  Each line is a key, value pair with the\nkey and value separated by a colon (`:`).  Lines starting with a\nhash (`#`) are ignored.",9],[10,"get","","Fetches a value by key and converts it into the given type.\nTypical types are `String`, `bool` and integer types.",9],[10,"find","","",9],[10,"contains_key","","",9],[10,"len","","",9],[10,"to_redis_args","collections::string","",10],[10,"to_redis_args","collections::vec","",11],[10,"to_redis_args","core::option","",12],[10,"describe_numeric_behavior","","",12],[10,"is_single_arg","","",12],[10,"to_redis_args","serialize::json","",13],[10,"from_redis_value","collections::string","",10],[10,"from_redis_value","collections::vec","",11],[10,"from_redis_value","std::collections::hashmap::map","",14],[10,"from_redis_value","std::collections::hashmap::set","",15],[10,"from_redis_value","redis","",1],[10,"from_redis_value","","",9],[10,"from_redis_value","serialize::json","",13],[10,"from_redis_value","core::option","",12],[10,"new","redis","Creates a new script object.",16],[10,"get_hash","","Returns the script's SHA1 hash in hexadecimal format.",16],[10,"key","","Creates a script invocation object with a key filled in.",16],[10,"arg","","Creates a script invocation object with an argument filled in.",16],[10,"prepare_invoke","","Returns an empty script invocation object.  This is primarily useful\nfor programmatically adding arguments and keys because the type will\nnot change.  Normally you can use `arg` and `key` directly.",16],[10,"invoke","","Invokes the script directly without arguments.",16],[10,"arg","","Adds a regular argument to the invocation.  This ends up as `ARGV[i]`\nin the script.",17],[10,"key","","Adds a key argument to the invocation.  This ends up as `KEYS[i]`\nin the script.",17],[10,"invoke","","Invokes the script and returns the result.",17],[10,"clone","","",18],[10,"next","","",19],[10,"new","","Creates a new empty command.",18],[10,"arg","","Appends an argument to the command.  The argument passed must\nbe a type that implements `ToRedisArgs`.  Most primitive types as\nwell as vectors of primitive types implement it.",18],[10,"cursor_arg","","Works similar to `arg` but adds a cursor argument.  This is always\nan integer and also flips the command implementation to support a\ndifferent mode for the iterators where the iterator will ask for\nanother batch of items when the local data is exhausted.",18],[10,"get_packed_command","","Returns the packed command as a byte vector.",18],[10,"in_scan_mode","","Returns true if the command is in scan mode.",18],[10,"query","","Sends the command as query to the connection and converts the\nresult to the target redis value.  This is the general way how\nyou can retrieve data.",18],[10,"iter","","Similar to `query()` but returns an iterator over the items of the\nbulk result or iterator.  In normal mode this is not in any way more\nefficient than just querying into a `Vec<T>` as it's internally\nimplemented as buffering into a vector.  This however is useful when\n`cursor_arg` was used in which case the iterator will query for more\nitems until the server side cursor is exhausted.",18],[10,"execute","","This is a shortcut to `query()` that does not return a value and\nwill fail the task if the query fails because of an error.  This is\nmainly useful in examples and for simple commands like setting\nkeys.",18],[10,"new","","Creates an empty pipeline.  For consistency with the `cmd`\napi a `pipe` function is provided as alias.",20],[10,"cmd","","Starts a new command.  Functions such as `arg` then become\navailable to add more arguments to that command.",20],[10,"add_command","","Adds a command to the pipeline.",20],[10,"arg","","Adds an argument to the last started command.  This works similar\nto the `arg` method of the `Cmd` object.",20],[10,"ignore","","Instructs the pipeline to ignore the return value of this command.\nIt will still be ensured that it is not an error, but any successful\nresult is just thrown away.  This makes result processing through\ntuples much easier because you do not need to handle all the items\nyou do not care about.",20],[10,"atomic","","This enables atomic mode.  In atomic mode the whole pipeline is\nenclosed in `MULTI`/`EXEC`.  From the user's point of view nothing\nchanges however.  This is easier than using `MULTI`/`EXEC` yourself\nas the format does not change.",20],[10,"query","","Executes the pipeline and fetches the return values.  Since most\npipelines return different types it's recommended to use tuple\nmatching to process the results:",20],[10,"execute","","This is a shortcut to `query()` that does not return a value and\nwill fail the task if the query of the pipeline fails.",20],[10,"perform","","",20],[4,"RedisResult","","Library generic result type."],[6,"ConnectionLike","","Implements the \"stateless\" part of the connection interface that is used by the\ndifferent objects in redis-rs.  Primarily it obviously applies to `Connection`\nobject but also some other objects implement the interface (for instance\nwhole clients or certain redis results)."],[9,"req_packed_command","","Sends an already encoded (packed) command into the TCP socket and\nreads the single response from it.",21],[9,"req_packed_commands","","Sends multiple already encoded (packed) command into the TCP socket\nand reads `count` responses from it.  This is used to implement\npipelining.",21],[9,"get_db","","Returns the database this connection is bound to.  Note that this\ninformation might be unreliable because it's initially cached and\nalso might be incorrect if the connection like object is not\nactually connected.",21],[6,"Commands","","Implements common redis commands for connection like objects.  This\nallows you to send commands straight to a connection or client.  It\nis also implemented for redis results of clients which makes for\nvery convenient access in some basic cases."],[10,"get","","Get the value of a key.  If key is a vec this becomes an `MGET`.",22],[10,"set","","Set the string value of a key.",22],[10,"set_multiple","","Sets multiple keys to their values.",22],[10,"set_ex","","Set the value and expiration of a key.",22],[10,"set_nx","","Set the value of a key, only if the key does not exist",22],[10,"mset_nx","","Sets multiple keys to their values failing if at least one already exists.",22],[10,"getset","","Set the string value of a key and return its old value.",22],[10,"del","","Delete one or more keys.",22],[10,"exists","","Determine if a key exists.",22],[10,"expire","","Set a key's time to live in seconds.",22],[10,"expire_at","","Set the expiration for a key as a UNIX timestamp.",22],[10,"pexpire","","Set a key's time to live in milliseconds.",22],[10,"pexpire_at","","Set the expiration for a key as a UNIX timestamp in milliseconds.",22],[10,"persist","","Remove the expiration from a key.",22],[10,"rename","","Rename a key.",22],[10,"rename_nx","","Rename a key, only if the new key does not exist.",22],[10,"append","","Append a value to a key.",22],[10,"incr","","Increment the numeric value of a key by the given amount.  This\nissues a `INCR` or `INCRBYFLOAT` depending on the type.",22],[10,"setbit","","Sets or clears the bit at offset in the string value stored at key.",22],[10,"getbit","","Returns the bit value at offset in the string value stored at key.",22],[10,"bitcount","","Count set bits in a string.",22],[10,"bitcount_range","","Count set bits in a string in a range.",22],[10,"bit_and","","Perform a bitwise AND between multiple keys (containing string values)\nand store the result in the destination key.",22],[10,"bit_or","","Perform a bitwise OR between multiple keys (containing string values)\nand store the result in the destination key.",22],[10,"bit_xor","","Perform a bitwise XOR between multiple keys (containing string values)\nand store the result in the destination key.",22],[10,"bit_not","","Perform a bitwise NOT of the key (containing string values)\nand store the result in the destination key.",22],[10,"strlen","","Get the length of the value stored in a key.",22],[10,"hget","","Gets a single (or multiple) fields from a hash.",22],[10,"hdel","","Deletes a single (or multiple) fields from a hash.",22],[10,"hset","","Sets a single field in a hash.",22],[10,"hset_nx","","Sets a single field in a hash if it does not exist.",22],[10,"hset_multiple","","Sets a multiple fields in a hash.",22],[10,"hincr","","Increments a value.",22],[10,"hexists","","Checks if a field in a hash exists.",22],[10,"hkeys","","Gets all the keys in a hash.",22],[10,"hvals","","Gets all the values in a hash.",22],[10,"hgetall","","Gets all the fields and values in a hash.",22],[10,"hlen","","Gets the length of a hash.",22],[10,"blpop","","Remove and get the first element in a list, or block until one is available.",22],[10,"brpop","","Remove and get the last element in a list, or block until one is available.",22],[10,"brpoplpush","","Pop a value from a list, push it to another list and return it;\nor block until one is available.",22],[10,"lindex","","Get an element from a list by its index.",22],[10,"linsert_before","","Insert an element before another element in a list.",22],[10,"linsert_after","","Insert an element after another element in a list.",22],[10,"llen","","Returns the length of the list stored at key.",22],[10,"lpop","","Removes and returns the first element of the list stored at key.",22],[10,"lpush","","Insert all the specified values at the head of the list stored at key.",22],[10,"lpush_exists","","Inserts a value at the head of the list stored at key, only if key already exists and\nholds a list.",22],[10,"lrange","","Returns the specified elements of the list stored at key.",22],[10,"lrem","","Removes the first count occurrences of elements equal to value\nfrom the list stored at key.",22],[10,"ltrim","","Trim an existing list so that it will contain only the specified\nrange of elements specified.",22],[10,"rpop","","Removes and returns the last element of the list stored at key.",22],[10,"rpoplpush","","Pop a value from a list, push it to another list and return it.",22],[10,"rpush","","Insert all the specified values at the tail of the list stored at key.",22],[10,"rpush_exists","","Inserts value at the tail of the list stored at key, only if key already exists and\nholds a list.",22],[10,"sadd","","Add one or more members to a set.",22],[10,"scard","","Get the number of members in a set.",22],[10,"sdiff","","Subtract multiple sets.",22],[10,"sdiffstore","","Subtract multiple sets and store the resulting set in a key.",22],[10,"sinter","","Intersect multiple sets.",22],[10,"sdinterstore","","Intersect multiple sets and store the resulting set in a key.",22],[10,"sismember","","Determine if a given value is a member of a set.",22],[10,"smembers","","Get all the members in a set.",22],[10,"smove","","Move a member from one set to another.",22],[10,"spop","","Remove and return a random member from a set.",22],[10,"srandmember","","Get one random member from a set.",22],[10,"srandmember_multiple","","Get multiple random members from a set.",22],[10,"srem","","Remove one or more members from a set.",22],[10,"sunion","","Add multiple sets.",22],[10,"sunionstore","","Add multiple sets and store the resulting set in a key.",22],[10,"zadd","","Add one member to a sorted set, or update its score\nif it already exists.",22],[10,"zadd_multiple","","Add multiple members to a sorted set, or update its score\nif it already exists.",22],[10,"zcard","","Get the number of members in a sorted set.",22],[10,"zcount","","Count the members in a sorted set with scores within the given values.",22],[10,"zincr","","Count the members in a sorted set with scores within the given values.",22],[10,"zinterstore","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using SUM as aggregation function.",22],[10,"zinterstore_min","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using MIN as aggregation function.",22],[10,"zinterstore_max","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using MAX as aggregation function.",22],[10,"zlexcount","","Count the number of members in a sorted set between a given lexicographical range.",22],[10,"zrange","","Return a range of members in a sorted set, by index",22],[10,"zrange_withscores","","Return a range of members in a sorted set, by index with scores.",22],[10,"zrangebylex","","Return a range of members in a sorted set, by lexicographical range.",22],[10,"zrangebylex_limit","","Return a range of members in a sorted set, by lexicographical\nrange with offset and limit.",22],[10,"zrevrangebylex","","Return a range of members in a sorted set, by lexicographical range.",22],[10,"zrevrangebylex_limit","","Return a range of members in a sorted set, by lexicographical\nrange with offset and limit.",22],[10,"zrangebyscore","","Return a range of members in a sorted set, by score.",22],[10,"zrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",22],[10,"zrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",22],[10,"zrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",22],[10,"zrank","","Determine the index of a member in a sorted set.",22],[10,"zrem","","Remove one or more members from a sorted set.",22],[10,"zrembylex","","Remove all members in a sorted set between the given lexicographical range.",22],[10,"zrembyrank","","Remove all members in a sorted set within the given indexes.",22],[10,"zrembyscore","","Remove all members in a sorted set within the given scores.",22],[10,"zrevrange","","Return a range of members in a sorted set, by index, with scores\nordered from high to low.",22],[10,"zrevrange_withscores","","Return a range of members in a sorted set, by index, with scores\nordered from high to low.",22],[10,"zrevrangebyscore","","Return a range of members in a sorted set, by score.",22],[10,"zrevrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",22],[10,"zrevrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",22],[10,"zrevrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",22],[10,"zrevrank","","Determine the index of a member in a sorted set, with scores ordered from high to low.",22],[10,"zscore","","Get the score associated with the given member in a sorted set.",22],[10,"zunionstore","","Unions multiple sorted sets and store the resulting sorted set in\na new key using SUM as aggregation function.",22],[10,"zunionstore_min","","Unions multiple sorted sets and store the resulting sorted set in\na new key using MIN as aggregation function.",22],[10,"zunionstore_max","","Unions multiple sorted sets and store the resulting sorted set in\na new key using MAX as aggregation function.",22],[10,"pfadd","","Adds the specified elements to the specified HyperLogLog.",22],[10,"pfcount","","Return the approximated cardinality of the set(s) observed by the\nHyperLogLog at key(s).",22],[10,"pfmerge","","Merge N different HyperLogLogs into a single one.",22],[10,"scan","","Incrementally iterate the keys space.",22],[10,"scan_match","","Incrementally iterate the keys space for keys matching a pattern.",22],[10,"hscan","","Incrementally iterate hash fields and associated values.",22],[10,"hscan_match","","Incrementally iterate hash fields and associated values for\nfield names matching a pattern.",22],[10,"sscan","","Incrementally iterate set elements.",22],[10,"sscan_match","","Incrementally iterate set elements for elements matching a pattern.",22],[10,"zscan","","Incrementally iterate sorted set elements.",22],[10,"zscan_match","","Incrementally iterate sorted set elements for elements matching a pattern.",22],[6,"PipelineCommands","","Implements common redis commands for pipelines.  Unlike the regular\ncommands trait, this returns the pipeline rather than a result\ndirectly.  Other than that it works the same however."],[10,"get","","Get the value of a key.  If key is a vec this becomes an `MGET`.",23],[10,"set","","Set the string value of a key.",23],[10,"set_multiple","","Sets multiple keys to their values.",23],[10,"set_ex","","Set the value and expiration of a key.",23],[10,"set_nx","","Set the value of a key, only if the key does not exist",23],[10,"mset_nx","","Sets multiple keys to their values failing if at least one already exists.",23],[10,"getset","","Set the string value of a key and return its old value.",23],[10,"del","","Delete one or more keys.",23],[10,"exists","","Determine if a key exists.",23],[10,"expire","","Set a key's time to live in seconds.",23],[10,"expire_at","","Set the expiration for a key as a UNIX timestamp.",23],[10,"pexpire","","Set a key's time to live in milliseconds.",23],[10,"pexpire_at","","Set the expiration for a key as a UNIX timestamp in milliseconds.",23],[10,"persist","","Remove the expiration from a key.",23],[10,"rename","","Rename a key.",23],[10,"rename_nx","","Rename a key, only if the new key does not exist.",23],[10,"append","","Append a value to a key.",23],[10,"incr","","Increment the numeric value of a key by the given amount.  This\nissues a `INCR` or `INCRBYFLOAT` depending on the type.",23],[10,"setbit","","Sets or clears the bit at offset in the string value stored at key.",23],[10,"getbit","","Returns the bit value at offset in the string value stored at key.",23],[10,"bitcount","","Count set bits in a string.",23],[10,"bitcount_range","","Count set bits in a string in a range.",23],[10,"bit_and","","Perform a bitwise AND between multiple keys (containing string values)\nand store the result in the destination key.",23],[10,"bit_or","","Perform a bitwise OR between multiple keys (containing string values)\nand store the result in the destination key.",23],[10,"bit_xor","","Perform a bitwise XOR between multiple keys (containing string values)\nand store the result in the destination key.",23],[10,"bit_not","","Perform a bitwise NOT of the key (containing string values)\nand store the result in the destination key.",23],[10,"strlen","","Get the length of the value stored in a key.",23],[10,"hget","","Gets a single (or multiple) fields from a hash.",23],[10,"hdel","","Deletes a single (or multiple) fields from a hash.",23],[10,"hset","","Sets a single field in a hash.",23],[10,"hset_nx","","Sets a single field in a hash if it does not exist.",23],[10,"hset_multiple","","Sets a multiple fields in a hash.",23],[10,"hincr","","Increments a value.",23],[10,"hexists","","Checks if a field in a hash exists.",23],[10,"hkeys","","Gets all the keys in a hash.",23],[10,"hvals","","Gets all the values in a hash.",23],[10,"hgetall","","Gets all the fields and values in a hash.",23],[10,"hlen","","Gets the length of a hash.",23],[10,"blpop","","Remove and get the first element in a list, or block until one is available.",23],[10,"brpop","","Remove and get the last element in a list, or block until one is available.",23],[10,"brpoplpush","","Pop a value from a list, push it to another list and return it;\nor block until one is available.",23],[10,"lindex","","Get an element from a list by its index.",23],[10,"linsert_before","","Insert an element before another element in a list.",23],[10,"linsert_after","","Insert an element after another element in a list.",23],[10,"llen","","Returns the length of the list stored at key.",23],[10,"lpop","","Removes and returns the first element of the list stored at key.",23],[10,"lpush","","Insert all the specified values at the head of the list stored at key.",23],[10,"lpush_exists","","Inserts a value at the head of the list stored at key, only if key already exists and\nholds a list.",23],[10,"lrange","","Returns the specified elements of the list stored at key.",23],[10,"lrem","","Removes the first count occurrences of elements equal to value\nfrom the list stored at key.",23],[10,"ltrim","","Trim an existing list so that it will contain only the specified\nrange of elements specified.",23],[10,"rpop","","Removes and returns the last element of the list stored at key.",23],[10,"rpoplpush","","Pop a value from a list, push it to another list and return it.",23],[10,"rpush","","Insert all the specified values at the tail of the list stored at key.",23],[10,"rpush_exists","","Inserts value at the tail of the list stored at key, only if key already exists and\nholds a list.",23],[10,"sadd","","Add one or more members to a set.",23],[10,"scard","","Get the number of members in a set.",23],[10,"sdiff","","Subtract multiple sets.",23],[10,"sdiffstore","","Subtract multiple sets and store the resulting set in a key.",23],[10,"sinter","","Intersect multiple sets.",23],[10,"sdinterstore","","Intersect multiple sets and store the resulting set in a key.",23],[10,"sismember","","Determine if a given value is a member of a set.",23],[10,"smembers","","Get all the members in a set.",23],[10,"smove","","Move a member from one set to another.",23],[10,"spop","","Remove and return a random member from a set.",23],[10,"srandmember","","Get one random member from a set.",23],[10,"srandmember_multiple","","Get multiple random members from a set.",23],[10,"srem","","Remove one or more members from a set.",23],[10,"sunion","","Add multiple sets.",23],[10,"sunionstore","","Add multiple sets and store the resulting set in a key.",23],[10,"zadd","","Add one member to a sorted set, or update its score\nif it already exists.",23],[10,"zadd_multiple","","Add multiple members to a sorted set, or update its score\nif it already exists.",23],[10,"zcard","","Get the number of members in a sorted set.",23],[10,"zcount","","Count the members in a sorted set with scores within the given values.",23],[10,"zincr","","Count the members in a sorted set with scores within the given values.",23],[10,"zinterstore","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using SUM as aggregation function.",23],[10,"zinterstore_min","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using MIN as aggregation function.",23],[10,"zinterstore_max","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using MAX as aggregation function.",23],[10,"zlexcount","","Count the number of members in a sorted set between a given lexicographical range.",23],[10,"zrange","","Return a range of members in a sorted set, by index",23],[10,"zrange_withscores","","Return a range of members in a sorted set, by index with scores.",23],[10,"zrangebylex","","Return a range of members in a sorted set, by lexicographical range.",23],[10,"zrangebylex_limit","","Return a range of members in a sorted set, by lexicographical\nrange with offset and limit.",23],[10,"zrevrangebylex","","Return a range of members in a sorted set, by lexicographical range.",23],[10,"zrevrangebylex_limit","","Return a range of members in a sorted set, by lexicographical\nrange with offset and limit.",23],[10,"zrangebyscore","","Return a range of members in a sorted set, by score.",23],[10,"zrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",23],[10,"zrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",23],[10,"zrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",23],[10,"zrank","","Determine the index of a member in a sorted set.",23],[10,"zrem","","Remove one or more members from a sorted set.",23],[10,"zrembylex","","Remove all members in a sorted set between the given lexicographical range.",23],[10,"zrembyrank","","Remove all members in a sorted set within the given indexes.",23],[10,"zrembyscore","","Remove all members in a sorted set within the given scores.",23],[10,"zrevrange","","Return a range of members in a sorted set, by index, with scores\nordered from high to low.",23],[10,"zrevrange_withscores","","Return a range of members in a sorted set, by index, with scores\nordered from high to low.",23],[10,"zrevrangebyscore","","Return a range of members in a sorted set, by score.",23],[10,"zrevrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",23],[10,"zrevrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",23],[10,"zrevrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",23],[10,"zrevrank","","Determine the index of a member in a sorted set, with scores ordered from high to low.",23],[10,"zscore","","Get the score associated with the given member in a sorted set.",23],[10,"zunionstore","","Unions multiple sorted sets and store the resulting sorted set in\na new key using SUM as aggregation function.",23],[10,"zunionstore_min","","Unions multiple sorted sets and store the resulting sorted set in\na new key using MIN as aggregation function.",23],[10,"zunionstore_max","","Unions multiple sorted sets and store the resulting sorted set in\na new key using MAX as aggregation function.",23],[10,"pfadd","","Adds the specified elements to the specified HyperLogLog.",23],[10,"pfcount","","Return the approximated cardinality of the set(s) observed by the\nHyperLogLog at key(s).",23],[10,"pfmerge","","Merge N different HyperLogLogs into a single one.",23],[6,"FromRedisValue","","This trait is used to convert a redis value into a more appropriate\ntype.  While a redis `Value` can represent any response that comes\nback from the redis server, usually you want to map this into something\nthat works better in rust.  For instance you might want to convert the\nreturn value into a `String` or an integer."],[9,"from_redis_value","","Given a redis `Value` this attempts to convert it into the given\ndestination type.  If that fails because it's not compatible an\nappropriate error is generated.",24],[10,"from_redis_values","","Similar to `from_redis_value` but constructs a vector of objects\nfrom another vector of values.  This primarily exists internally\nto customize the behavior for vectors of tuples.",24],[6,"ToRedisArgs","","Used to convert a value into one or multiple redis argument\nstrings.  Most values will produce exactly one item but in\nsome cases it might make sense to produce more than one."],[9,"to_redis_args","","This converts the value into a vector of bytes.  Each item\nis a single argument.  Most items generate a vector of a\nsingle item.",25],[10,"describe_numeric_behavior","","Returns an information about the contained value with regards\nto it's numeric behavior in a redis context.  This is used in\nsome high level concepts to switch between different implementations\nof redis functions (for instance `INCR` vs `INCRBYFLOAT`).",25],[10,"is_single_arg","","Returns an indiciation if the value contained is exactly one\nargument.  It returns false if it's zero or more than one.  This\nis used in some high level functions to intelligently switch\nbetween `GET` and `MGET` variants.",25],[10,"req_packed_command","","",26],[10,"req_packed_commands","","",26],[10,"get_db","","",26],[10,"describe_numeric_behavior","","Returns an information about the contained value with regards\nto it's numeric behavior in a redis context.  This is used in\nsome high level concepts to switch between different implementations\nof redis functions (for instance `INCR` vs `INCRBYFLOAT`).",25],[10,"is_single_arg","","Returns an indiciation if the value contained is exactly one\nargument.  It returns false if it's zero or more than one.  This\nis used in some high level functions to intelligently switch\nbetween `GET` and `MGET` variants.",25],[10,"from_redis_values","","Similar to `from_redis_value` but constructs a vector of objects\nfrom another vector of values.  This primarily exists internally\nto customize the behavior for vectors of tuples.",24],[10,"get","","Get the value of a key.  If key is a vec this becomes an `MGET`.",22],[10,"set","","Set the string value of a key.",22],[10,"set_multiple","","Sets multiple keys to their values.",22],[10,"set_ex","","Set the value and expiration of a key.",22],[10,"set_nx","","Set the value of a key, only if the key does not exist",22],[10,"mset_nx","","Sets multiple keys to their values failing if at least one already exists.",22],[10,"getset","","Set the string value of a key and return its old value.",22],[10,"del","","Delete one or more keys.",22],[10,"exists","","Determine if a key exists.",22],[10,"expire","","Set a key's time to live in seconds.",22],[10,"expire_at","","Set the expiration for a key as a UNIX timestamp.",22],[10,"pexpire","","Set a key's time to live in milliseconds.",22],[10,"pexpire_at","","Set the expiration for a key as a UNIX timestamp in milliseconds.",22],[10,"persist","","Remove the expiration from a key.",22],[10,"rename","","Rename a key.",22],[10,"rename_nx","","Rename a key, only if the new key does not exist.",22],[10,"append","","Append a value to a key.",22],[10,"incr","","Increment the numeric value of a key by the given amount.  This\nissues a `INCR` or `INCRBYFLOAT` depending on the type.",22],[10,"setbit","","Sets or clears the bit at offset in the string value stored at key.",22],[10,"getbit","","Returns the bit value at offset in the string value stored at key.",22],[10,"bitcount","","Count set bits in a string.",22],[10,"bitcount_range","","Count set bits in a string in a range.",22],[10,"bit_and","","Perform a bitwise AND between multiple keys (containing string values)\nand store the result in the destination key.",22],[10,"bit_or","","Perform a bitwise OR between multiple keys (containing string values)\nand store the result in the destination key.",22],[10,"bit_xor","","Perform a bitwise XOR between multiple keys (containing string values)\nand store the result in the destination key.",22],[10,"bit_not","","Perform a bitwise NOT of the key (containing string values)\nand store the result in the destination key.",22],[10,"strlen","","Get the length of the value stored in a key.",22],[10,"hget","","Gets a single (or multiple) fields from a hash.",22],[10,"hdel","","Deletes a single (or multiple) fields from a hash.",22],[10,"hset","","Sets a single field in a hash.",22],[10,"hset_nx","","Sets a single field in a hash if it does not exist.",22],[10,"hset_multiple","","Sets a multiple fields in a hash.",22],[10,"hincr","","Increments a value.",22],[10,"hexists","","Checks if a field in a hash exists.",22],[10,"hkeys","","Gets all the keys in a hash.",22],[10,"hvals","","Gets all the values in a hash.",22],[10,"hgetall","","Gets all the fields and values in a hash.",22],[10,"hlen","","Gets the length of a hash.",22],[10,"blpop","","Remove and get the first element in a list, or block until one is available.",22],[10,"brpop","","Remove and get the last element in a list, or block until one is available.",22],[10,"brpoplpush","","Pop a value from a list, push it to another list and return it;\nor block until one is available.",22],[10,"lindex","","Get an element from a list by its index.",22],[10,"linsert_before","","Insert an element before another element in a list.",22],[10,"linsert_after","","Insert an element after another element in a list.",22],[10,"llen","","Returns the length of the list stored at key.",22],[10,"lpop","","Removes and returns the first element of the list stored at key.",22],[10,"lpush","","Insert all the specified values at the head of the list stored at key.",22],[10,"lpush_exists","","Inserts a value at the head of the list stored at key, only if key already exists and\nholds a list.",22],[10,"lrange","","Returns the specified elements of the list stored at key.",22],[10,"lrem","","Removes the first count occurrences of elements equal to value\nfrom the list stored at key.",22],[10,"ltrim","","Trim an existing list so that it will contain only the specified\nrange of elements specified.",22],[10,"rpop","","Removes and returns the last element of the list stored at key.",22],[10,"rpoplpush","","Pop a value from a list, push it to another list and return it.",22],[10,"rpush","","Insert all the specified values at the tail of the list stored at key.",22],[10,"rpush_exists","","Inserts value at the tail of the list stored at key, only if key already exists and\nholds a list.",22],[10,"sadd","","Add one or more members to a set.",22],[10,"scard","","Get the number of members in a set.",22],[10,"sdiff","","Subtract multiple sets.",22],[10,"sdiffstore","","Subtract multiple sets and store the resulting set in a key.",22],[10,"sinter","","Intersect multiple sets.",22],[10,"sdinterstore","","Intersect multiple sets and store the resulting set in a key.",22],[10,"sismember","","Determine if a given value is a member of a set.",22],[10,"smembers","","Get all the members in a set.",22],[10,"smove","","Move a member from one set to another.",22],[10,"spop","","Remove and return a random member from a set.",22],[10,"srandmember","","Get one random member from a set.",22],[10,"srandmember_multiple","","Get multiple random members from a set.",22],[10,"srem","","Remove one or more members from a set.",22],[10,"sunion","","Add multiple sets.",22],[10,"sunionstore","","Add multiple sets and store the resulting set in a key.",22],[10,"zadd","","Add one member to a sorted set, or update its score\nif it already exists.",22],[10,"zadd_multiple","","Add multiple members to a sorted set, or update its score\nif it already exists.",22],[10,"zcard","","Get the number of members in a sorted set.",22],[10,"zcount","","Count the members in a sorted set with scores within the given values.",22],[10,"zincr","","Count the members in a sorted set with scores within the given values.",22],[10,"zinterstore","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using SUM as aggregation function.",22],[10,"zinterstore_min","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using MIN as aggregation function.",22],[10,"zinterstore_max","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using MAX as aggregation function.",22],[10,"zlexcount","","Count the number of members in a sorted set between a given lexicographical range.",22],[10,"zrange","","Return a range of members in a sorted set, by index",22],[10,"zrange_withscores","","Return a range of members in a sorted set, by index with scores.",22],[10,"zrangebylex","","Return a range of members in a sorted set, by lexicographical range.",22],[10,"zrangebylex_limit","","Return a range of members in a sorted set, by lexicographical\nrange with offset and limit.",22],[10,"zrevrangebylex","","Return a range of members in a sorted set, by lexicographical range.",22],[10,"zrevrangebylex_limit","","Return a range of members in a sorted set, by lexicographical\nrange with offset and limit.",22],[10,"zrangebyscore","","Return a range of members in a sorted set, by score.",22],[10,"zrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",22],[10,"zrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",22],[10,"zrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",22],[10,"zrank","","Determine the index of a member in a sorted set.",22],[10,"zrem","","Remove one or more members from a sorted set.",22],[10,"zrembylex","","Remove all members in a sorted set between the given lexicographical range.",22],[10,"zrembyrank","","Remove all members in a sorted set within the given indexes.",22],[10,"zrembyscore","","Remove all members in a sorted set within the given scores.",22],[10,"zrevrange","","Return a range of members in a sorted set, by index, with scores\nordered from high to low.",22],[10,"zrevrange_withscores","","Return a range of members in a sorted set, by index, with scores\nordered from high to low.",22],[10,"zrevrangebyscore","","Return a range of members in a sorted set, by score.",22],[10,"zrevrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",22],[10,"zrevrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",22],[10,"zrevrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",22],[10,"zrevrank","","Determine the index of a member in a sorted set, with scores ordered from high to low.",22],[10,"zscore","","Get the score associated with the given member in a sorted set.",22],[10,"zunionstore","","Unions multiple sorted sets and store the resulting sorted set in\na new key using SUM as aggregation function.",22],[10,"zunionstore_min","","Unions multiple sorted sets and store the resulting sorted set in\na new key using MIN as aggregation function.",22],[10,"zunionstore_max","","Unions multiple sorted sets and store the resulting sorted set in\na new key using MAX as aggregation function.",22],[10,"pfadd","","Adds the specified elements to the specified HyperLogLog.",22],[10,"pfcount","","Return the approximated cardinality of the set(s) observed by the\nHyperLogLog at key(s).",22],[10,"pfmerge","","Merge N different HyperLogLogs into a single one.",22],[10,"scan","","Incrementally iterate the keys space.",22],[10,"scan_match","","Incrementally iterate the keys space for keys matching a pattern.",22],[10,"hscan","","Incrementally iterate hash fields and associated values.",22],[10,"hscan_match","","Incrementally iterate hash fields and associated values for\nfield names matching a pattern.",22],[10,"sscan","","Incrementally iterate set elements.",22],[10,"sscan_match","","Incrementally iterate set elements for elements matching a pattern.",22],[10,"zscan","","Incrementally iterate sorted set elements.",22],[10,"zscan_match","","Incrementally iterate sorted set elements for elements matching a pattern.",22],[10,"get","","Get the value of a key.  If key is a vec this becomes an `MGET`.",23],[10,"set","","Set the string value of a key.",23],[10,"set_multiple","","Sets multiple keys to their values.",23],[10,"set_ex","","Set the value and expiration of a key.",23],[10,"set_nx","","Set the value of a key, only if the key does not exist",23],[10,"mset_nx","","Sets multiple keys to their values failing if at least one already exists.",23],[10,"getset","","Set the string value of a key and return its old value.",23],[10,"del","","Delete one or more keys.",23],[10,"exists","","Determine if a key exists.",23],[10,"expire","","Set a key's time to live in seconds.",23],[10,"expire_at","","Set the expiration for a key as a UNIX timestamp.",23],[10,"pexpire","","Set a key's time to live in milliseconds.",23],[10,"pexpire_at","","Set the expiration for a key as a UNIX timestamp in milliseconds.",23],[10,"persist","","Remove the expiration from a key.",23],[10,"rename","","Rename a key.",23],[10,"rename_nx","","Rename a key, only if the new key does not exist.",23],[10,"append","","Append a value to a key.",23],[10,"incr","","Increment the numeric value of a key by the given amount.  This\nissues a `INCR` or `INCRBYFLOAT` depending on the type.",23],[10,"setbit","","Sets or clears the bit at offset in the string value stored at key.",23],[10,"getbit","","Returns the bit value at offset in the string value stored at key.",23],[10,"bitcount","","Count set bits in a string.",23],[10,"bitcount_range","","Count set bits in a string in a range.",23],[10,"bit_and","","Perform a bitwise AND between multiple keys (containing string values)\nand store the result in the destination key.",23],[10,"bit_or","","Perform a bitwise OR between multiple keys (containing string values)\nand store the result in the destination key.",23],[10,"bit_xor","","Perform a bitwise XOR between multiple keys (containing string values)\nand store the result in the destination key.",23],[10,"bit_not","","Perform a bitwise NOT of the key (containing string values)\nand store the result in the destination key.",23],[10,"strlen","","Get the length of the value stored in a key.",23],[10,"hget","","Gets a single (or multiple) fields from a hash.",23],[10,"hdel","","Deletes a single (or multiple) fields from a hash.",23],[10,"hset","","Sets a single field in a hash.",23],[10,"hset_nx","","Sets a single field in a hash if it does not exist.",23],[10,"hset_multiple","","Sets a multiple fields in a hash.",23],[10,"hincr","","Increments a value.",23],[10,"hexists","","Checks if a field in a hash exists.",23],[10,"hkeys","","Gets all the keys in a hash.",23],[10,"hvals","","Gets all the values in a hash.",23],[10,"hgetall","","Gets all the fields and values in a hash.",23],[10,"hlen","","Gets the length of a hash.",23],[10,"blpop","","Remove and get the first element in a list, or block until one is available.",23],[10,"brpop","","Remove and get the last element in a list, or block until one is available.",23],[10,"brpoplpush","","Pop a value from a list, push it to another list and return it;\nor block until one is available.",23],[10,"lindex","","Get an element from a list by its index.",23],[10,"linsert_before","","Insert an element before another element in a list.",23],[10,"linsert_after","","Insert an element after another element in a list.",23],[10,"llen","","Returns the length of the list stored at key.",23],[10,"lpop","","Removes and returns the first element of the list stored at key.",23],[10,"lpush","","Insert all the specified values at the head of the list stored at key.",23],[10,"lpush_exists","","Inserts a value at the head of the list stored at key, only if key already exists and\nholds a list.",23],[10,"lrange","","Returns the specified elements of the list stored at key.",23],[10,"lrem","","Removes the first count occurrences of elements equal to value\nfrom the list stored at key.",23],[10,"ltrim","","Trim an existing list so that it will contain only the specified\nrange of elements specified.",23],[10,"rpop","","Removes and returns the last element of the list stored at key.",23],[10,"rpoplpush","","Pop a value from a list, push it to another list and return it.",23],[10,"rpush","","Insert all the specified values at the tail of the list stored at key.",23],[10,"rpush_exists","","Inserts value at the tail of the list stored at key, only if key already exists and\nholds a list.",23],[10,"sadd","","Add one or more members to a set.",23],[10,"scard","","Get the number of members in a set.",23],[10,"sdiff","","Subtract multiple sets.",23],[10,"sdiffstore","","Subtract multiple sets and store the resulting set in a key.",23],[10,"sinter","","Intersect multiple sets.",23],[10,"sdinterstore","","Intersect multiple sets and store the resulting set in a key.",23],[10,"sismember","","Determine if a given value is a member of a set.",23],[10,"smembers","","Get all the members in a set.",23],[10,"smove","","Move a member from one set to another.",23],[10,"spop","","Remove and return a random member from a set.",23],[10,"srandmember","","Get one random member from a set.",23],[10,"srandmember_multiple","","Get multiple random members from a set.",23],[10,"srem","","Remove one or more members from a set.",23],[10,"sunion","","Add multiple sets.",23],[10,"sunionstore","","Add multiple sets and store the resulting set in a key.",23],[10,"zadd","","Add one member to a sorted set, or update its score\nif it already exists.",23],[10,"zadd_multiple","","Add multiple members to a sorted set, or update its score\nif it already exists.",23],[10,"zcard","","Get the number of members in a sorted set.",23],[10,"zcount","","Count the members in a sorted set with scores within the given values.",23],[10,"zincr","","Count the members in a sorted set with scores within the given values.",23],[10,"zinterstore","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using SUM as aggregation function.",23],[10,"zinterstore_min","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using MIN as aggregation function.",23],[10,"zinterstore_max","","Intersect multiple sorted sets and store the resulting sorted set in\na new key using MAX as aggregation function.",23],[10,"zlexcount","","Count the number of members in a sorted set between a given lexicographical range.",23],[10,"zrange","","Return a range of members in a sorted set, by index",23],[10,"zrange_withscores","","Return a range of members in a sorted set, by index with scores.",23],[10,"zrangebylex","","Return a range of members in a sorted set, by lexicographical range.",23],[10,"zrangebylex_limit","","Return a range of members in a sorted set, by lexicographical\nrange with offset and limit.",23],[10,"zrevrangebylex","","Return a range of members in a sorted set, by lexicographical range.",23],[10,"zrevrangebylex_limit","","Return a range of members in a sorted set, by lexicographical\nrange with offset and limit.",23],[10,"zrangebyscore","","Return a range of members in a sorted set, by score.",23],[10,"zrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",23],[10,"zrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",23],[10,"zrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",23],[10,"zrank","","Determine the index of a member in a sorted set.",23],[10,"zrem","","Remove one or more members from a sorted set.",23],[10,"zrembylex","","Remove all members in a sorted set between the given lexicographical range.",23],[10,"zrembyrank","","Remove all members in a sorted set within the given indexes.",23],[10,"zrembyscore","","Remove all members in a sorted set within the given scores.",23],[10,"zrevrange","","Return a range of members in a sorted set, by index, with scores\nordered from high to low.",23],[10,"zrevrange_withscores","","Return a range of members in a sorted set, by index, with scores\nordered from high to low.",23],[10,"zrevrangebyscore","","Return a range of members in a sorted set, by score.",23],[10,"zrevrangebyscore_withscores","","Return a range of members in a sorted set, by score with scores.",23],[10,"zrevrangebyscore_limit","","Return a range of members in a sorted set, by score with limit.",23],[10,"zrevrangebyscore_limit_withscores","","Return a range of members in a sorted set, by score with limit with scores.",23],[10,"zrevrank","","Determine the index of a member in a sorted set, with scores ordered from high to low.",23],[10,"zscore","","Get the score associated with the given member in a sorted set.",23],[10,"zunionstore","","Unions multiple sorted sets and store the resulting sorted set in\na new key using SUM as aggregation function.",23],[10,"zunionstore_min","","Unions multiple sorted sets and store the resulting sorted set in\na new key using MIN as aggregation function.",23],[10,"zunionstore_max","","Unions multiple sorted sets and store the resulting sorted set in\na new key using MAX as aggregation function.",23],[10,"pfadd","","Adds the specified elements to the specified HyperLogLog.",23],[10,"pfcount","","Return the approximated cardinality of the set(s) observed by the\nHyperLogLog at key(s).",23],[10,"pfmerge","","Merge N different HyperLogLogs into a single one.",23]],"paths":[[1,"Error"],[2,"Value"],[2,"ErrorKind"],[2,"NumericBehavior"],[1,"Parser"],[1,"Client"],[1,"Connection"],[1,"PubSub"],[1,"Msg"],[1,"InfoDict"],[1,"String"],[1,"Vec"],[2,"Option"],[2,"Json"],[1,"HashMap"],[1,"HashSet"],[1,"Script"],[1,"ScriptInvocation"],[1,"Cmd"],[1,"Iter"],[1,"Pipeline"],[6,"ConnectionLike"],[6,"Commands"],[6,"PipelineCommands"],[6,"FromRedisValue"],[6,"ToRedisArgs"],[4,"RedisResult"]]};
initSearch(searchIndex);
